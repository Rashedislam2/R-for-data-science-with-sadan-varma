v1 = 1:20
print(v1)
v2 = seq(1,20)
print(v2)
v2 = seq(1,20)
print(v2)
is.vector(var1)
v2 = seq(1,20,by=2)
print(v2)
v3 =c(2,3,5,4,6,7,24,15,36)
sorted_value=sort(v3)
v3 =c(2,3,5,4,6,7,24,15,36)
sorted_value=sort(v3)
print(sorted_value)
install.packages("nycflight13")
nycflight13
install.packages("nycflight13")
install.packages("nycflight13")
install.packages("ggplot2")
library(ggplot2)
data.set = mtcars
data.set
data.set = mtcars
data.set
data.set
View(data.set)
#generating a basic scatter plot
ggplot(data.set,aes(x=wt,y=mpg)) +
geom_point()
ggplot(data.set,aes(x=wt,y=mpg)) +
geom_point(size=2)
ggplot(data.set,aes(x=wt,y=mpg)) +
geom_point(size=4)
ggplot(data.set,aes(x=wt,y=mpg)) +
geom_point(size=3)
ggplot(data.set,aes(x=wt,y=mpg)) +
geom_point(size=3,shape=2)
ggplot(data.set,aes(x=wt,y=mpg)) +
geom_point(size=3,shape=1
)
ggplot(data.set,aes(x=wt,y=mpg)) +
geom_point(size=3,shape=4 )
ggplot(data.set,aes(x=wt,y=mpg)) +
geom_point(size=3,shape=5 )
ggplot(data.set,aes(x=wt,y=mpg)) +
geom_point(size=3,shape=6 )
ggplot(data.set,aes(x=wt,y=mpg)) +
geom_point(size=3,shape=7 )
ggplot(data.set,aes(x=wt,y=mpg)) +
geom_point(size=3,shape=8 )
ggplot(data.set,aes(x=wt,y=mpg)) +
geom_point(size=3,shape=9 )
ggplot(data.set,aes(x=wt,y=mpg)) +
geom_point(size=3,shape=10 )
ggplot(data.set,aes(x=wt,y=mpg)) +
geom_point(size=4,shape=10 )
ggplot(data.set,aes(x=wt,y=mpg)) +
geom_point(size=4,shape=16 )
ggplot(data.set,aes(x=wt,y=mpg)) +
geom_point(size=2,shape=16 )
ggplot(data.set,aes(x=wt,y=mpg)) +
geom_point(size=2,shape=17 )
ggplot(data.set,aes(x=wt,y=mpg)) +
geom_point(size=2,shape=17 ) + geom
ggplot(data.set,aes(x=wt,y=mpg)) +
geom_point(size=2,shape=17 ) +geom
ggplot(data.set,aes(x=wt,y=mpg)) +
geom_point(size=2,shape=17 ) +
geom
ggplot(data.set,aes(x=wt,y=mpg)) +
geom_point(size=2,shape=17 ) +
geom
ggplot(data.set,aes(x=wt,y=mpg)) +
geom_point(size=2,shape=17 ) +
geom_smooth(method = lm)
library(psych)
data()
AirPassengers
attach(nycflights13::flight)
attach(nycflights13::flights)
head(nycflights13::flights)
summary(distance)
describe(distance)
demo=cbind(arr_delay,dep_delay,distance)
demo
describe(demo)
colnames(demo)=c('arrival dealay','deperture delay','distance')
demo
colnames(demo)=c('arrival dealay','deperture delay','distance')
demo
dep_delay
hist(dep_delay)
carrier
carrierfact=factor(carrier)
class(carrierfact)
summary(carrierfact)
describe(carrierfact)
describe.by(distance,group=carrier)
aggregate(distance,by=list(carrier,month),FUN=mean,na.rm=TRUE)
setwd("E:/r git hub/R-for-data-science-with-sadan-varma/RDSML-Day-14 ðŸ‘‰ Histogram in R (Part-2)")
dataset = read.csv("data.csv")
#importing the data set
dataset = read.csv("data.csv")
View(dataset)
#importing library
library(ggplot2)
#creating the basic histogram
ggplot(dataset,aes(x=weight))+
geom_histogram()
#creating the basic histogram
ggplot(dataset,aes(x=weight))+
geom_histogram(color="white")
#Changing histogram plot line colors by groups
ggplot(dataset,aes(x=weight,fill='sex'))+
geom_histogram(color="white")
#Changing histogram plot line colors by groups
ggplot(dataset,aes(x=weight,fill=sex))+
geom_histogram(color="white")
#Changing histogram plot line colors by groups
ggplot(dataset,aes(x=weight,fill=sex))+
geom_histogram(color="white",alpha=0.5)
#Changing histogram plot line colors by groups
ggplot(dataset,aes(x=weight,fill=sex))+
geom_histogram(color="white",alpha=0.5,position = "identity")
#Changing histogram plot line colors by groups
ggplot(dataset,aes(x=weight,fill=sex))+
geom_histogram(color="white",alpha=1,position = "identity")
#Changing histogram plot line colors by groups
ggplot(dataset,aes(x=weight,fill=sex))+
geom_histogram(color="white",alpha=.1,position = "identity")
#Changing histogram plot line colors by groups
ggplot(dataset,aes(x=weight,fill=sex))+
geom_histogram(color="white",alpha=.8,position = "identity")
#Changing histogram plot line colors by groups
ggplot(dataset,aes(x=weight,fill=sex))+
geom_histogram(color="white",alpha=0.5,position = "identity")
ggplot(dataset,aes(x=weight,fill=sex))+
geom_histogram(color="white",alpha=0.5,position = "dodge")
ggplot(dataset,aes(x=weight,fill=sex))+
geom_histogram(color="white",alpha=0.5,position = "dodge")+
theme(legend.position = "top")
#The plyr package is used to calculate the mean weight of each group
install.packages("plyr")
library(plyr)
group_means=ddply(dataset,"sex",summarise,grp.mean=mean(weight))
group_means
#adding mean lines
myplot = ggplot(dataset,aes(x=weight,fill=sex))+
geom_histogram(color="white",alpha=0.5,position = "dodge")+
geom_vline(data=group_means,aes(xintercept = grp.mean))+
theme(legend.position = "top")
myplot
myplot = ggplot(dataset,aes(x=weight,fill=sex))+
geom_histogram(color="white",alpha=0.5,position = "dodge")+
geom_vline(data=group_means,aes(xintercept = grp.mean,color=sex),
linetype="dashed")+
theme(legend.position = "top")
myplot
#using custom color paletters
myplot
#using custom color paletters
myplot + scale_color_manual(values = c("red","green"))+
scale_fill_manual(values = c("blue","orange"))
#adding mean lines
myplot = ggplot(dataset,aes(x=weight,fill=sex))+
geom_histogram(color="white",alpha=1,position = "dodge")+
geom_vline(data=group_means,aes(xintercept = grp.mean,color=sex),
linetype="dashed")+
theme(legend.position = "top")
myplot = ggplot(dataset,aes(x=weight,fill=sex))+
geom_histogram(color="white",alpha=1,position = "dodge")+
geom_vline(data=group_means,aes(xintercept = grp.mean,color=sex),
linetype="dashed")+
theme(legend.position = "top")
myplot
myplot + scale_color_manual(values = c("red","green"))+
scale_fill_manual(values = c("blue","orange"))
#using custom color paletters
myplot + scale_color_manual(values = c("red","green"))+
scale_fill_manual(values = c("lightblue","orange"))
#using custom color paletters
myplot + scale_color_manual(values = c("red","green"))+
scale_fill_manual(values = c("lightblue","lightorange"))
#using custom color paletters
myplot + scale_color_manual(values = c("red","green"))+
scale_fill_manual(values = c("lightblue","yellow"))
#using custom color paletters
myplot + scale_color_manual(values = c("#999999","#E69F00"))+
scale_fill_manual(values = c("#999999","#E69F00"))
#using color brewer color paletters
myplot+scale_color_brewer((palette="dark2"))+
scale_fill_brewer(palette = "dark2")
#using color brewer color paletters
myplot+scale_color_brewer((palette="Dark2"))+
scale_fill_brewer(palette = "Dark2")
#using a grey scale
myplot+scale_color_grey()+ scale_fill_grey()+
theme_classic()
